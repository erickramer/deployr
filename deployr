#!/usr/bin/python

import sys

sys.path.append('/Users/Eric/anaconda/lib/python2.7/site-packages')
sys.path.append('./python')

from flask import Flask, request, json
import argparse
import re
import datetime
import os
import shutil
from deployr.rconnection import RConnectionBuilder
from deployr.service import Service

def create():

	service_file = args['service'][0]
	service = re.sub(".[Rr]*dat[a]*$", "", service_file)

	directory = args['dir']
	if directory is None:
		directory = "./%s_%s" % (service, datetime.datetime.now().strftime('%Y-%m-%d_%H:%M:%S'))

	if os.path.exists(directory):
		raise IOError("Directory for deployr already exists. Please provide path to new directory for create")

	if not os.path.isfile(service_file):
		raise IOError("%s does not appear to be a valid file" % service_file)

	os.mkdir(directory)
	os.mkdir(directory + '/R')
	os.mkdir(directory + '/static')
	
	# copy over necessary files
	shutil.copyfile(service_file, directory + '/R/service.Rdata')

	# copy over forms, etc

def deploy():

	app = Flask(__name__)

	@app.route('/home')
	def home():
		return "I'm trying to find a place to live"

	@app.route('/api/<endpoint>/predict', methods=['GET', 'POST'])
	def predict(endpoint):
		if request.method == 'POST':
			data = json.dumps(request.form)
			return s.predict(endpoint, data)
		elif request.method == 'GET':
			return "I recevied a get!"


	@app.route('/api/<endpoint>')
	@app.route('/api/<endpoint>/info')
	def info(endpoint):
		return "Getting info for %s" % endpoint

	directory = args['dir'][0]
	if not os.path.exists(directory):
		raise IOError("%s does not appear to exist. Try `deployr create` first" % directory)

	service = args['service'][0]
	if service is None:
		service = directory + "/R/service.Rdata"
	service = os.path.abspath(service)
	
	rport = args['rport'][0]
	rurl = args['rurl'][0]

	os.chdir(directory)
	rbuilder = RConnectionBuilder() 
	s = Service(rbuilder, service)
	
	app.run()


def shutdown():
	pass


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description = "Deploy deployr services as an API")

	parser.add_argument("command", nargs = 1, help = "Create, deploy or shutdown a deployr service")
	parser.add_argument("--service",  nargs = 1, help = "Filename of R service created with deployr R package")
	parser.add_argument("--dir", nargs=1, type=str, help = "Location of files for deployment")
	parser.add_argument("--pyport", dest="pyport", type=int, nargs=1, help="Port for the python server", default=1000)
	parser.add_argument("--rport", dest="rport", type=int, nargs=1, help="Port for the Rserver", default=6311)
	parser.add_argument("--rurl", dest="rurl", type=str, nargs=1, help="URL for the Rserver", default="localhost")

	args = vars(parser.parse_args())
	
	cmd = args['command'][0].lower()

	if cmd == "create":
		create()
	elif cmd == "deploy":
		deploy()
	elif cmd == "shutdown":
		shutdown()
	else:
		raise LookupError("%s unknown command for deployr" % cmd)
	